#include <pthread.h>
//para copilar devemos usar cc  pthread philo.c 

//criando uma thread 

// 1 ponteiro para um valor inteiro sem sinal aue retorna o id da thread criada
// 2 ponteiro para uma estrutura que defiide os atributos. NULL qnd foit uma thread padrão
// 3 start_routine -> ponteiro para uma sub-rotina que é executada pela thread. O tipo de retorno e o tipo de parâmetro
// da sub-rotina devem ser do tipo void *. A função tem um único atributo, mas se vários valores 
// precisam ser passados ​​para a função, uma estrutura deve ser usada.
// arg: ponteiro para void que contém os argumentos para a função definida no argumento anterior
int pthread_create(pthread_t *thread, NULL, void *(*start_routine)(void *), void *arg);

//pthread_join: usado para esperar o término de uma thread.

int pthread_join (pthread_t th, void ** thread_return);

//th: o id do thread pelo qual o thread atual espera.
// thread_return: ponteiro para o local onde o status de saída do thread mencionado neste está armazenado.

//pthread_self: usado para obter o id do thread atual.

pthread_t pthread_self ();

//pthread_equal: compara se duas threads são iguais ou não. Se os dois threads forem iguais, a função retorna um valor diferente de zero, caso contrário, zero.

int pthread_equal (pthread_t t1, pthread_t t2);


//cria um ambiente inde multiplos fios de execucao paralelos executam o mesmo programa e partilham as mesmas 
//estruturas de dados e ficheiros. 
//threads sao mais rapidas porque elas seexecutam dentro de um oricessi e nao tem de carregar os programas em
//memoria ou obter memoria para os seus dados e pilhas. 
// a funçao suspenthread suspende uma thread e a resumethread acorda threads.
//thread local storage  permite manter dados especificos reativos a cada tarefa globalmente acessivel a apatir de qualquer
// outro ponto do programa em execucao.
//thread pooling cria tarefas qye estao a maior parte do tempo adormecidas ou bloqueadas. 
// criacao mutex phthread_mutex_init. abertura phthread_mutex_unlock. eliminacao phthread_mutex_destroy.

